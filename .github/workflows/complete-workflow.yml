name: Build code, run unit test, run SAST, SCA, DAST security scans
on: push

jobs:
  build:
    runs-on: ubuntu-latest
    name: Run unit tests and SAST scan on the source code 
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven cloud
      run:  mvn -B verify sonar:sonar -Dsonar.projectKey=security2022 -Dsonar.organization=security2022 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  security:
    runs-on: ubuntu-latest
    needs: build
    name: Run the SCA scan on the source code
    steps:
      - uses: actions/checkout@master
      - name: RunSnyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-and-scan:
    name: Build and scan image
    runs-on: ubuntu-latest
    env:   
            IMAGE_NAME: ${{ github.repository }}:${{ github.sha }} 

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Build the image
        run: docker build -t $IMAGE_NAME .

      - name: Prisma Cloud image scan
        id: scan
        uses: PaloAltoNetworks/prisma-cloud-scan@v1
        continue-on-error: false
        with:
          pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
          pcc_user: ${{ secrets.PCC_USER }}
          pcc_pass: ${{ secrets.PCC_PASS }}
          image_name: ${{ env.IMAGE_NAME }}
        


env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: hello-cluster    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: ketch-test # TODO: update to deployment name
  IMAGE: static-site


  name: Setup, Build, Publish, and Deploy
  runs-on: ubuntu-latest

  steps:
  - name: ACTIONS_ALLOW_UNSECURE_COMMANDS
    id: ACTIONS_ALLOW_UNSECURE_COMMANDS
    run: echo 'ACTIONS_ALLOW_UNSECURE_COMMANDS=true' >> $GITHUB_ENV

  - name: Checkout
    uses: actions/checkout@v2

    # Setup gcloud CLI
  - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
    with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
  - run: |-
        gcloud --quiet auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
  - run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    # Build the Docker image
  - name: Build
    run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Container Registry
  - name: Publish
    run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
    # Set up ketch
  - name: Set up Ketch
    run: |-
        curl -sfLo ketch https://github.com/shipa-corp/ketch/releases/download/v0.1.1/ketch-linux-amd64
        chmod u+x ./ketch
    # Deploy the Docker image to the GKE cluster
  - name: Deploy
    run: |-
        ./ketch pool add ${{ secrets.KETCH_POOL }} --ingress-service-endpoint  ${{ secrets.KETCH_INGRESS_SP }} --ingress-type istio --cluster-issuer le
        ./ketch app create  ${{ secrets.KETCH_APP }} --pool  ${{ secrets.KETCH_POOL }}
        ./ketch app deploy  ${{ secrets.KETCH_APP }} -i gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA --ketch-yaml $GITHUB_WORKSPACE/ketch.yaml
